basePath: /api/v1
definitions:
  api.CreateTaskReq:
    properties:
      description:
        type: string
      userId:
        type: integer
    type: object
  api.CreateUserReq:
    properties:
      passportNumber:
        type: string
    type: object
  api.TaskJSON:
    properties:
      description:
        type: string
      hours:
        type: integer
      minutes:
        type: integer
      seconds:
        type: integer
      status:
        type: boolean
      taskId:
        type: integer
      userId:
        type: integer
    type: object
  api.UserJSON:
    properties:
      address:
        type: string
      name:
        type: string
      passportNumber:
        type: string
      patronymic:
        type: string
      surname:
        type: string
      userId:
        type: integer
    type: object
  api.updateTaskStatus:
    properties:
      status:
        type: boolean
    type: object
  api.updateUserReq:
    properties:
      address:
        type: string
      name:
        type: string
      passportNumber:
        type: string
      patronymic:
        type: string
      surname:
        type: string
    type: object
  httputil.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Petstore server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /tasks/:
    post:
      consumes:
      - application/json
      description: Creates task
      parameters:
      - description: CreateTaskReq
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateTaskReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: int
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Creates task
  /tasks/{taskId}:
    put:
      consumes:
      - application/json
      description: Update the task's status
      parameters:
      - description: Status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/api.updateTaskStatus'
      - description: TaskID
        in: path
        name: taskId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Update the task's status
  /users/:
    get:
      consumes:
      - application/json
      description: Gets users
      parameters:
      - description: Pagination offset
        in: query
        name: offset
        required: true
        type: integer
      - description: Pagination limit
        in: query
        name: limit
        required: true
        type: integer
      - collectionFormat: csv
        description: Filters
        in: query
        items:
          type: string
        name: filters
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.UserJSON'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Gets users
    post:
      consumes:
      - application/json
      description: Creates user
      parameters:
      - description: Create user
        in: body
        name: passportNumber
        required: true
        schema:
          $ref: '#/definitions/api.CreateUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: uint
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Creates user
  /users/{userId}:
    delete:
      consumes:
      - application/json
      description: Deletes user
      parameters:
      - description: UserID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Deletes user
    get:
      consumes:
      - application/json
      description: Gets the user's tasks
      parameters:
      - description: YYYY-MM-DDThh:mm:ss.SSSZ rfc3339
        in: query
        name: to
        type: string
      - description: YYYY-MM-DDThh:mm:ss.SSSZ rfc3339
        in: query
        name: from
        type: string
      - description: Pagination offset
        in: query
        name: offset
        required: true
        type: integer
      - description: Pagination limit
        in: query
        name: limit
        required: true
        type: integer
      - description: UserID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.TaskJSON'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Gets the user's tasks
    put:
      consumes:
      - application/json
      description: Updates user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.updateUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Updates user
swagger: "2.0"
